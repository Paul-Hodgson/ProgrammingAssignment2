## the following function either sets or gets the value of the vector
makeCacheMatrix <- function(x = matrix()) {
f <- NULL  ##sets the initial value of the flag f
## (which governs whether to use the cached value or calculate it)
set <- function(A) {
x <<- A
f <<- NULL
}
get <- function() x
setinv <- function(solve) f <<- solve ##create the inverse of a special vector
getinv <- function() f
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## the following function calculates the inverse of the matrix,
## using a cached value if it exists
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
f <- x$getinv()
if(!is.null(f)) { ## check to see if the inverse has already been calculated
message("getting cached data")
return(f)
}
data <- x$get()
f <- solve(data, ...)
x$setinv(f) ## perform the inverse calculation
f
}
x<-matrix (c(2,4,1,5),nrows=2)
x
x<-matrix (c(2,4,1,5),nrows=2,ncol=2)
x<-matrix (1:4,nrows=2,ncol=2)
data<-c(2,5,3,1)
x<-matrix (data,nrows=2,ncol=2)
d<-c(2,5,3,1)
x<-matrix (data=d,nrows=2,ncol=2,byrow=TRUE)
x<-matrix (1:4,nrow=2)
x
solve(x)
makeCacheMatrix(cacheSolve(x))
cacheSolve(makeCacheMatrix(x))
